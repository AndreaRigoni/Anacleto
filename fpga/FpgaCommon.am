

# Vivado from Xilinx provides IP handling, FPGA compilation
# hsi (hardware software interface) provides software integration
# both tools are run in batch mode with an option to avoid log/journal files
VIVADO       = vivado -nolog -nojournal -mode batch
VIVADO_SHELL = vivado -nolog -nojournal -mode tcl
HSI          = hsi    -nolog -nojournal -mode batch
HSI_SHELL    = hsi    -nolog -nojournal -mode tcl

FPGA_BIT    ?= out/$(BOARD).bit
FSBL_ELF    ?= sdk/fsbl/executable.elf
DTS         ?= sdk/dts/devicetree.dts
DTB         ?= sdk/dts/devicetree.dtb

FPGA_DIR        = $(abs_top_srcdir)/fpga
FPGA_REPO_DIR   = $(abs_top_srcdir)/fpga/ip_repo
DTREE_DIR      ?= $(abs_top_builddir)/fpga/device-tree-xlnx-${VIVADO_VERSION}
VIVADO_VERSION ?= 2015.4


define _envset
 . $(VIVADO_SETUP_SCRIPT); \
 . $(VIVADO_SDK_SETUP_SCRIPT)
endef

export srcdir \
       top_srcdir

export maxThreads=1

export FPGA_DIR \
       FPGA_BIT \
       DTREE_DIR \
       VIVADO_VERSION \
       VIVADO_SOC_PART \
       FPGA_REPO_DIR

export NAME \
       BOARD \
       VENDOR \
       LIBRARY \
       VERSION \
       SOURCES \
       BD_SOURCES \
       IP_SOURCES

bash:
	@ ${_envset}; \
	  /bin/bash


## ////////////////////////////////////////////////////////////////////////// ##
## ///  CORE BUILD      ///////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

export VIVADO_PRJDIR = $(BOARD)
export VIVADO_IPDIR  = ip/vivado

_p_ven  = $(firstword $(subst _, ,$(1)))
_p_ver  = $(lastword $(subst _, ,$(1)))
_p_name = $(subst $(call _p_ven,$(1))_,,$(subst _$(call _p_ver,$(1)),,$(1)))

_p_set = $(if $1, NAME="$(call _p_name,$1)" \
		  VENDOR="$(call _p_ven,$1)" \
		  VERSION="$(call _p_ver,$1)" \
		  SOURCES="$($(subst .,_,$1)_SOURCES)"      \
		  BD_SOURCES="$($(subst .,_,$1)_BD_SOURCES)" \
		  IP_SOURCES="$($(subst .,_,$1)_IP_SOURCES)"  \
		  DRV_LINUX="$($(subst .,_,$1)_DRV_LINUX)" \
		, $(if $2,$(call _p_set,$2)) )

vivado       = $(VIVADO)       -source $(FPGA_DIR)/vivado_make.tcl -tclargs $1
vivado_shell = $(VIVADO_SHELL) -source $(FPGA_DIR)/vivado_make.tcl -tclargs $1


check_sources: $(SOURCES) $(BD_SOURCES) $(IP_SOURCES)


## HELP
projects:      ##@projects build all projects defined in vivado_PROJECTS variable
cores:         ##@cores build all cores defined in vivado_CORES variable
list_projects: ##@projects list all projects defined in vivado_PROJECTS variable
list_cores:    ##@cores list all projects defined in vivado_PROJECTS variable



## ////////////////////////////////////////////////////////////////////////// ##
## ///  TARGET DIRECTORIES  ///////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

$(vivado_PROJECTS):
	@ $(MAKE) $(builddir)/$(VIVADO_PRJDIR)/$@_edit $(call _p_set,$@)

$(srcdir)/$(VIVADO_PRJDIR)/%: $(builddir)/$(VIVADO_PRJDIR)/%_edit $(SOURCES) $(BD_SOURCES) $(IP_SOURCES)
	@ ${_envset}; \
	  $(call vivado, write_project)

$(builddir)/$(VIVADO_PRJDIR)/%_edit: $(SOURCES) $(BD_SOURCES) $(IP_SOURCES)
	@ ${_envset}; \
	  $(call vivado, new_project)

projects: $(vivado_PROJECTS)

list_projects:
	@ echo $(vivado_PROJECTS)


$(vivado_CORES):
	@ $(MAKE) $(srcdir)/$(VIVADO_IPDIR)/$@ BOARD="ip/vivado" $(call _p_set,$@)

$(filter-out $(vivado_CORES),$(IP_SOURCES)):
	@ $(MAKE) -C $(@D) $(@F)

# $(FPGA_REPO_DIR)/%/$(VIVADO_IPDIR)/%_edit:
#	@ $(MAKE) -C $(@D) $(@F)

$(srcdir)/$(VIVADO_IPDIR)/%: $(SOURCES) $(BD_SOURCES) $(IP_SOURCES)
	@ ${_envset}; \
	  $(call vivado, new_ip)

$(builddir)/$(VIVADO_IPDIR)/%_edit: $(srcdir)/$(VIVADO_IPDIR)/% $(SOURCES) $(BD_SOURCES) $(IP_SOURCES)
	@ ${_envset}; \
	  $(call vivado, edit_ip)

cores: $(vivado_CORES)

list_cores:
	@ echo $(vivado_CORES)


## ////////////////////////////////////////////////////////////////////////// ##
## ///  VIVADO SHELL    ///////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: vivado_shell
vivado_shell: ##@vivado open a vivado shell with configured env
	@ ${_envset}; \
	$(call _p_set,$(NAME)) \
	$(VIVADO_SHELL) -source $(FPGA_DIR)/vivado_make.tcl

.PHONY: hsi_shell
hsi_shell:  ##@vivado open hsi shell with configured env
	@ ${_envset}; \
	$(call _p_set,$(NAME)) \
	$(HSI_SHELL) -source $(FPGA_DIR)/vivado_make.tcl


## ////////////////////////////////////////////////////////////////////////// ##
## ///  VIVADO PROJECT  ///////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

new_project:   ##@projects Create a new vivado project in vivado_project folder named as the currently selected board.
open_project:  ##@projects Open the current project in vivado_project folder  or generate it using previously stored tcl script.
write_project: ##@projects Store the current  project saving all related local sources in vivado_src folder.
write_bitstream:  ##@projects generate bitstream using auto_synth and auto_impl runs.

new_ip:   ##@cores create a new pheripheral project for edit.
edit_ip:  ##@cores open all module pheripherals projects for edit.

# .PHONY: new_project new_ip write_project write_bitstream
write_project write_bitstream:
	@ ${_envset}; \
	  $(call _p_set,$(NAME),$(lastword $(vivado_PROJECTS))) $(MAKE) check_sources; \
	  $(call _p_set,$(NAME),$(lastword $(vivado_PROJECTS))) $(call vivado,$@)

.PHONY: open_project edit_ip
new_project open_project:
	@ ${_envset}; \
	  $(call _p_set,$(NAME),$(lastword $(vivado_PROJECTS))) $(MAKE) check_sources; \
	  $(call _p_set,$(NAME),$(lastword $(vivado_PROJECTS))) $(call vivado_shell,$@)

new_ip edit_ip:
	@ ${_envset}; \
	  $(call _p_set,$(NAME),$(lastword $(vivado_CORES))) $(MAKE) check_sources; \
	  $(call _p_set,$(NAME),$(lastword $(vivado_CORES))) $(call vivado_shell,$@)


test_name:
	@ $(call _p_set,$(NAME),$(lastword $(vivado_PROJECTS))) \
	  echo $(NAME)

## TODO LINE:  -----------------------------------------------------------------

.PHONY: clean_project
clean_project: ##@projects Clean all build project files from disk (make write_project before this)
	@- ${_envset}; \
	  rm -rf $(if $NAME,$(builddir)/$(VIVADO_IPDIR)/$(NAME)) vivado.jou  vivado.log  \
		vivado_*.backup.jou  vivado_*.backup.log  vivado_pid*.str \
		webtalk.jou  webtalk.log  \
		webtalk_*.backup.jou  webtalk_*.backup.log



## ////////////////////////////////////////////////////////////////////////// ##
## ///  BITSTREAM  ////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: fpga bit
fpga bit: $(FPGA_BIT)

$(FPGA_BIT):
	@ $(MAKE) write_bitstream


## ////////////////////////////////////////////////////////////////////////// ##
## ///  FSBL  /////////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: fsbl
fsbl: $(FSBL_ELF)

$(FSBL_ELF):  $(FPGA_BIT)
	@ ${_envset}; \
	  $(HSI) -source $(FPGA_DIR)/vivado_make.tcl -tclargs write_fsbl



## ////////////////////////////////////////////////////////////////////////// ##
## ///  DEVICE TREEE  /////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: dts dtb
dts: $(DTS)
dtb: $(DTB)

sdk/dts/system.dts:  $(FPGA_BIT)
	@ $(MAKE) -C $(top_builddir)/fpga xlnx-devicetree; \
	  ${_envset}; \
	  $(HSI) -source $(FPGA_DIR)/vivado_make.tcl -tclargs write_devicetree

$(DTS): sdk/dts/system.dts $(LINUX_IMAGE)
	$(LINUX_BUILDDIR)/scripts/dtc/dtc -I dts -O dts -o $@ -i sdk/dts/ $<

$(DTB):  $(DTS) $(LINUX_IMAGE)
	$(LINUX_BUILDDIR)/scripts/dtc/dtc -I dts -O dtb -o $@ -i sdk/dts/ $<




## ////////////////////////////////////////////////////////////////////////// ##
## ///  DEPLOY  ///////////////////////////////////////////////////////////// ##
## ////////////////////////////////////////////////////////////////////////// ##

.PHONY: deploy
deploy: ##@miscellaneous Copy all files to target device
deploy: $(FPGA_BIT) $(LINUX_IMAGE) $(DTB)
if WITH_DEVICE_SSHKEY
	@ echo " --- deploying to target device: ${DEVICE_NAME} using key ---";
	scp -i $(DEVICE_SSHKEY) $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):$(DEVICE_BOOT_DIR);
else
if WITH_DEVICE_SSHPASSWD
	@ echo " --- deploying to target device: ${DEVICE_NAME} using passwd ---";
	sshpass -p ${DEVICE_PASSWD} scp $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):$(DEVICE_BOOT_DIR);
else
	@ echo "none of sshpass command or configured ssh key was found"
endif
endif

.PHONY: deploy_fpga
deploy_fpga: ##@miscellaneous Start generated bitstream in target device
deploy_fpga: $(FPGA_BIT)
	@ echo ""; \
	  echo " WARNING: This will reprogram fpga without setting devicetree and kernel "
if WITH_DEVICE_SSHKEY
	@ echo " --- deploying to target device: ${DEVICE_NAME} using key ---";
	scp -i $(DEVICE_SSHKEY) $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):/tmp/fpga.bit; \
	ssh -i $(DEVICE_SSHKEY) $(DEVICE_USER)@$(DEVICE_IP) "cat /tmp/fpga.bit > /dev/xdevcfg";
else
if WITH_DEVICE_SSHPASSWD
	@ echo " --- deploying to target device: ${DEVICE_NAME} using passwd ---";
	sshpass -p ${DEVICE_PASSWD} scp $^ \
	  $(DEVICE_USER)@$(DEVICE_IP):/tmp; \
	sshpass -p ${DEVICE_PASSWD} \
	  ssh $(DEVICE_USER)@$(DEVICE_IP) "cat /tmp/fpga.bit > /dev/xdevcfg";
else
	@ echo "none of sshpass command or configured ssh key was found"
endif
endif

